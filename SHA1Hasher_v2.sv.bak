module SHA1Hasher_v2(input [9:0] SW, input [0:0] KEY, output [7:0] HEX0, output [7:0] HEX1, output [7:0] HEX2, output [7:0] HEX3, output [7:0] HEX4, output [7:0] HEX5);
	logic [511:0] block;
	logic [159:0] hash;
	sha1_pad pad(SW, block);
	sha1_compress algo(block, hash);
	binary_to_hex_display hex5(hash[159:156], HEX5);
	binary_to_hex_display hex4(hash[155:152], HEX4);
	binary_to_hex_display hex3(hash[151:148], HEX3);
	binary_to_hex_display hex2(hash[147:144], HEX2);
	binary_to_hex_display hex1(hash[143:140], HEX1);
	binary_to_hex_display hex0(hash[139:136], HEX0);
endmodule

module binary_to_hex_display(input logic [3:0] binary, output logic [7:0] display);
	always_comb
		begin
			case(binary)
				//					  hgfedcba     original
				0: display = ~8'b00111111;
				1: display = ~8'b00000110;		
				2: display = ~8'b01011011; // 11011010
				3: display = ~8'b01001111; // 11110010
				4: display = ~8'b01100110; // 01100110
				5: display = ~8'b01101101; // 10110110
				6: display = ~8'b01111101; // 10111110
				7: display = ~8'b00000111; // 11100000
				8: display = ~8'b01111111; // 11111110
				9: display = ~8'b01100111; // 11100110
				10: display = ~8'b01110111; // 11101110
				11: display = ~8'b01111100; // 00111110
				12: display = ~8'b00111001; // 10011100
				13: display = ~8'b01011110; // 01111010
				14: display = ~8'b01111001; // 10011110
				15: display = ~8'b01110001; // 10001110
			endcase
		end
endmodule

//Pads 10 bits to 512
module sha1_pad(input [9:0] d, output [511:0] m);
		assign m = {d, 1'b1, 437'b0, 64'b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_1010};
endmodule

module sha1_compress(input [511:0] data, output [159:0] H);
	parameter j = 0;

	logic [2559:0] W;
	logic [31:0] h0 = 32'h67452301;
	logic [31:0] h1 = 32'hEFCDAB89;
	logic [31:0] h2 = 32'h98BADCFE;
	logic [31:0] h3 = 32'h10325476;
	logic [31:0] h4 = 32'hC3D2E1F0;
	
	schedule message_schedule(data, W);
	logic [31:0] m; // Message Schedule
	logic [31:0] k; // Round Constant
	logic [31:0] a, b, c, d, e;
			
	// Temporary Variables for computation
	logic [31:0] temp;
			
	always_comb
		begin
				// Calculate the message schedule for the current round
				if (j == 0) begin
					m = W[31:0];
				end else begin
					m = W[31 + (32*j) -: 32];
				end
					
				// Set a, b, c, d, and e to H0 to H4
				a = h0;
				b = h1;
				c = h2;
				d = h3;
				e = h4;
					
				//Determine f(t) and set the round constant
				if (j <= 19) begin
					temp = (b & c) + (~b & d);
					k = 32'h5A827999;
				end else if (j >= 20 && j <= 39) begin
					temp = b ^ c ^ d;
					k = 32'h6ED9EBA1;
				end else if (j >= 40 && j <= 59) begin
					temp = (b & c) + (b & d) + (c & d);
					k = 32'h8F1BBCDC;
				end else if (j > 59) begin
					temp = b ^ c ^ d;
					k = 32'hCA62C1D6;
				end
					
				// Finish the TEMP compression operations
				temp += e + m + k + rotl(a, 5);
					
				// Scramble the output
				e = d;
				d = c;
				c = rotl(b, 30);
				b = a;
				a = temp;
					
				h0 += a;
				h1 += b;
				h2 += c;
				h3 += d;
				h4 += e;
					
				// Compute the hash H
				if (j == 79) begin
					H = {h0, h1, h2, h3, h4};
				end
		end
	
	
	function rotl(input d, input int rot);
		rotl = (d << rot) | (d >> ($bits(d) - rot));
	endfunction
endmodule


module schedule(input [511: 0] data, output [2559:0] W);
	parameter j = 0;
	always_comb
		begin
			if (j == 0) begin
				W[0 +: 31] = data[31:0];
			end else if (j <= 16) begin
				W[31 + (32*j) -: 32] = data[31 + (32*j) -: 32];
			end else begin
				W[31 + (32*j)] = W[31 + (32*(j-16)) -: 32] ^ W[31 + (32*(j-14)) -: 32] ^ W[31 + (32*(j-8)) -: 32] ^ W[31 + (32*(j-3)) -: 32];
			end
		end
endmodule